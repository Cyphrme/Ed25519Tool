{
  "version": 3,
  "sources": ["noble-ed25519.js", "app.js"],
  "sourcesContent": ["// Version 1.6.0\n\n// Taken from: https://github.com/paulmillr/noble-ed25519/releases\n//\n// Modifications have been made to the file for:\n// 1.) Conforming to how we implement modules\n// 2.) Readability\n\n// (function (global, factory) {\n// \ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n// \t\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n// \t\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.nobleEd25519 = {}));\n// })(this, (function (exports) {\n'use strict';\n\nexport {\n\tbytesToHex,\n\tCURVE,\n\tExtendedPoint,\n\tPoint,\n\tRistrettoPoint,\n\tSignature,\n\tcurve25519,\n\tgetPublicKey,\n\tgetExtendedPublicKey,\n\tgetSharedSecret,\n\tsign,\n\tutils,\n\tverify,\n};\n\n\nconst nodeCrypto = {};\n\n/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _255n = BigInt(255);\nconst CURVE_ORDER = _2n ** BigInt(252) + BigInt('27742317777372353535851937790883648493');\nconst CURVE = {\n\ta: BigInt(-1),\n\td: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n\tP: _2n ** _255n - BigInt(19),\n\tl: CURVE_ORDER,\n\tn: CURVE_ORDER,\n\th: BigInt(8),\n\tGx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n\tGy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n};\nconst MAX_256B = _2n ** BigInt(256);\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nBigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n\nclass ExtendedPoint {\n\tconstructor(x, y, z, t) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.t = t;\n\t}\n\tstatic fromAffine(p) {\n\t\tif (!(p instanceof Point)) {\n\t\t\tthrow new TypeError('ExtendedPoint#fromAffine: expected Point');\n\t\t}\n\t\tif (p.equals(Point.ZERO))\n\t\t\treturn ExtendedPoint.ZERO;\n\t\treturn new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n\t}\n\tstatic toAffineBatch(points) {\n\t\tconst toInv = invertBatch(points.map((p) => p.z));\n\t\treturn points.map((p, i) => p.toAffine(toInv[i]));\n\t}\n\tstatic normalizeZ(points) {\n\t\treturn this.toAffineBatch(points).map(this.fromAffine);\n\t}\n\tequals(other) {\n\t\tassertExtPoint(other);\n\t\tconst {\n\t\t\tx: X1,\n\t\t\ty: Y1,\n\t\t\tz: Z1\n\t\t} = this;\n\t\tconst {\n\t\t\tx: X2,\n\t\t\ty: Y2,\n\t\t\tz: Z2\n\t\t} = other;\n\t\tconst X1Z2 = mod(X1 * Z2);\n\t\tconst X2Z1 = mod(X2 * Z1);\n\t\tconst Y1Z2 = mod(Y1 * Z2);\n\t\tconst Y2Z1 = mod(Y2 * Z1);\n\t\treturn X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n\t}\n\tnegate() {\n\t\treturn new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n\t}\n\tdouble() {\n\t\tconst {\n\t\t\tx: X1,\n\t\t\ty: Y1,\n\t\t\tz: Z1\n\t\t} = this;\n\t\tconst {\n\t\t\ta\n\t\t} = CURVE;\n\t\tconst A = mod(X1 ** _2n);\n\t\tconst B = mod(Y1 ** _2n);\n\t\tconst C = mod(_2n * mod(Z1 ** _2n));\n\t\tconst D = mod(a * A);\n\t\tconst E = mod(mod((X1 + Y1) ** _2n) - A - B);\n\t\tconst G = D + B;\n\t\tconst F = G - C;\n\t\tconst H = D - B;\n\t\tconst X3 = mod(E * F);\n\t\tconst Y3 = mod(G * H);\n\t\tconst T3 = mod(E * H);\n\t\tconst Z3 = mod(F * G);\n\t\treturn new ExtendedPoint(X3, Y3, Z3, T3);\n\t}\n\tadd(other) {\n\t\tassertExtPoint(other);\n\t\tconst {\n\t\t\tx: X1,\n\t\t\ty: Y1,\n\t\t\tz: Z1,\n\t\t\tt: T1\n\t\t} = this;\n\t\tconst {\n\t\t\tx: X2,\n\t\t\ty: Y2,\n\t\t\tz: Z2,\n\t\t\tt: T2\n\t\t} = other;\n\t\tconst A = mod((Y1 - X1) * (Y2 + X2));\n\t\tconst B = mod((Y1 + X1) * (Y2 - X2));\n\t\tconst F = mod(B - A);\n\t\tif (F === _0n)\n\t\t\treturn this.double();\n\t\tconst C = mod(Z1 * _2n * T2);\n\t\tconst D = mod(T1 * _2n * Z2);\n\t\tconst E = D + C;\n\t\tconst G = B + A;\n\t\tconst H = D - C;\n\t\tconst X3 = mod(E * F);\n\t\tconst Y3 = mod(G * H);\n\t\tconst T3 = mod(E * H);\n\t\tconst Z3 = mod(F * G);\n\t\treturn new ExtendedPoint(X3, Y3, Z3, T3);\n\t}\n\tsubtract(other) {\n\t\treturn this.add(other.negate());\n\t}\n\tprecomputeWindow(W) {\n\t\tconst windows = 1 + 256 / W;\n\t\tconst points = [];\n\t\tlet p = this;\n\t\tlet base = p;\n\t\tfor (let window = 0; window < windows; window++) {\n\t\t\tbase = p;\n\t\t\tpoints.push(base);\n\t\t\tfor (let i = 1; i < 2 ** (W - 1); i++) {\n\t\t\t\tbase = base.add(p);\n\t\t\t\tpoints.push(base);\n\t\t\t}\n\t\t\tp = base.double();\n\t\t}\n\t\treturn points;\n\t}\n\twNAF(n, affinePoint) {\n\t\tif (!affinePoint && this.equals(ExtendedPoint.BASE))\n\t\t\taffinePoint = Point.BASE;\n\t\tconst W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n\t\tif (256 % W) {\n\t\t\tthrow new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n\t\t}\n\t\tlet precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n\t\tif (!precomputes) {\n\t\t\tprecomputes = this.precomputeWindow(W);\n\t\t\tif (affinePoint && W !== 1) {\n\t\t\t\tprecomputes = ExtendedPoint.normalizeZ(precomputes);\n\t\t\t\tpointPrecomputes.set(affinePoint, precomputes);\n\t\t\t}\n\t\t}\n\t\tlet p = ExtendedPoint.ZERO;\n\t\tlet f = ExtendedPoint.ZERO;\n\t\tconst windows = 1 + 256 / W;\n\t\tconst windowSize = 2 ** (W - 1);\n\t\tconst mask = BigInt(2 ** W - 1);\n\t\tconst maxNumber = 2 ** W;\n\t\tconst shiftBy = BigInt(W);\n\t\tfor (let window = 0; window < windows; window++) {\n\t\t\tconst offset = window * windowSize;\n\t\t\tlet wbits = Number(n & mask);\n\t\t\tn >>= shiftBy;\n\t\t\tif (wbits > windowSize) {\n\t\t\t\twbits -= maxNumber;\n\t\t\t\tn += _1n;\n\t\t\t}\n\t\t\tif (wbits === 0) {\n\t\t\t\tlet pr = precomputes[offset];\n\t\t\t\tif (window % 2)\n\t\t\t\t\tpr = pr.negate();\n\t\t\t\tf = f.add(pr);\n\t\t\t} else {\n\t\t\t\tlet cached = precomputes[offset + Math.abs(wbits) - 1];\n\t\t\t\tif (wbits < 0)\n\t\t\t\t\tcached = cached.negate();\n\t\t\t\tp = p.add(cached);\n\t\t\t}\n\t\t}\n\t\treturn ExtendedPoint.normalizeZ([p, f])[0];\n\t}\n\tmultiply(scalar, affinePoint) {\n\t\treturn this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n\t}\n\tmultiplyUnsafe(scalar) {\n\t\tlet n = normalizeScalar(scalar, CURVE.l, false);\n\t\tconst G = ExtendedPoint.BASE;\n\t\tconst P0 = ExtendedPoint.ZERO;\n\t\tif (n === _0n)\n\t\t\treturn P0;\n\t\tif (this.equals(P0) || n === _1n)\n\t\t\treturn this;\n\t\tif (this.equals(G))\n\t\t\treturn this.wNAF(n);\n\t\tlet p = P0;\n\t\tlet d = this;\n\t\twhile (n > _0n) {\n\t\t\tif (n & _1n)\n\t\t\t\tp = p.add(d);\n\t\t\td = d.double();\n\t\t\tn >>= _1n;\n\t\t}\n\t\treturn p;\n\t}\n\tisSmallOrder() {\n\t\treturn this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n\t}\n\tisTorsionFree() {\n\t\treturn this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n\t}\n\ttoAffine(invZ = invert(this.z)) {\n\t\tconst {\n\t\t\tx,\n\t\t\ty,\n\t\t\tz\n\t\t} = this;\n\t\tconst ax = mod(x * invZ);\n\t\tconst ay = mod(y * invZ);\n\t\tconst zz = mod(z * invZ);\n\t\tif (zz !== _1n)\n\t\t\tthrow new Error('invZ was invalid');\n\t\treturn new Point(ax, ay);\n\t}\n\tfromRistrettoBytes() {\n\t\tlegacyRist();\n\t}\n\ttoRistrettoBytes() {\n\t\tlegacyRist();\n\t}\n\tfromRistrettoHash() {\n\t\tlegacyRist();\n\t}\n}\n\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\n\nfunction assertExtPoint(other) {\n\tif (!(other instanceof ExtendedPoint))\n\t\tthrow new TypeError('ExtendedPoint expected');\n}\n\nfunction assertRstPoint(other) {\n\tif (!(other instanceof RistrettoPoint))\n\t\tthrow new TypeError('RistrettoPoint expected');\n}\n\nfunction legacyRist() {\n\tthrow new Error('Legacy method: switch to RistrettoPoint');\n}\n\nclass RistrettoPoint {\n\tconstructor(ep) {\n\t\tthis.ep = ep;\n\t}\n\tstatic calcElligatorRistrettoMap(r0) {\n\t\tconst {\n\t\t\td\n\t\t} = CURVE;\n\t\tconst r = mod(SQRT_M1 * r0 * r0);\n\t\tconst Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n\t\tlet c = BigInt(-1);\n\t\tconst D = mod((c - d * r) * mod(r + d));\n\t\tlet {\n\t\t\tisValid: Ns_D_is_sq,\n\t\t\tvalue: s\n\t\t} = uvRatio(Ns, D);\n\t\tlet s_ = mod(s * r0);\n\t\tif (!edIsNegative(s_))\n\t\t\ts_ = mod(-s_);\n\t\tif (!Ns_D_is_sq)\n\t\t\ts = s_;\n\t\tif (!Ns_D_is_sq)\n\t\t\tc = r;\n\t\tconst Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n\t\tconst s2 = s * s;\n\t\tconst W0 = mod((s + s) * D);\n\t\tconst W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n\t\tconst W2 = mod(_1n - s2);\n\t\tconst W3 = mod(_1n + s2);\n\t\treturn new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n\t}\n\tstatic hashToCurve(hex) {\n\t\thex = ensureBytes(hex, 64);\n\t\tconst r1 = bytes255ToNumberLE(hex.slice(0, 32));\n\t\tconst R1 = this.calcElligatorRistrettoMap(r1);\n\t\tconst r2 = bytes255ToNumberLE(hex.slice(32, 64));\n\t\tconst R2 = this.calcElligatorRistrettoMap(r2);\n\t\treturn new RistrettoPoint(R1.add(R2));\n\t}\n\tstatic fromHex(hex) {\n\t\thex = ensureBytes(hex, 32);\n\t\tconst {\n\t\t\ta,\n\t\t\td\n\t\t} = CURVE;\n\t\tconst emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n\t\tconst s = bytes255ToNumberLE(hex);\n\t\tif (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n\t\t\tthrow new Error(emsg);\n\t\tconst s2 = mod(s * s);\n\t\tconst u1 = mod(_1n + a * s2);\n\t\tconst u2 = mod(_1n - a * s2);\n\t\tconst u1_2 = mod(u1 * u1);\n\t\tconst u2_2 = mod(u2 * u2);\n\t\tconst v = mod(a * d * u1_2 - u2_2);\n\t\tconst {\n\t\t\tisValid,\n\t\t\tvalue: I\n\t\t} = invertSqrt(mod(v * u2_2));\n\t\tconst Dx = mod(I * u2);\n\t\tconst Dy = mod(I * Dx * v);\n\t\tlet x = mod((s + s) * Dx);\n\t\tif (edIsNegative(x))\n\t\t\tx = mod(-x);\n\t\tconst y = mod(u1 * Dy);\n\t\tconst t = mod(x * y);\n\t\tif (!isValid || edIsNegative(t) || y === _0n)\n\t\t\tthrow new Error(emsg);\n\t\treturn new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n\t}\n\ttoRawBytes() {\n\t\tlet {\n\t\t\tx,\n\t\t\ty,\n\t\t\tz,\n\t\t\tt\n\t\t} = this.ep;\n\t\tconst u1 = mod(mod(z + y) * mod(z - y));\n\t\tconst u2 = mod(x * y);\n\t\tconst {\n\t\t\tvalue: invsqrt\n\t\t} = invertSqrt(mod(u1 * u2 ** _2n));\n\t\tconst D1 = mod(invsqrt * u1);\n\t\tconst D2 = mod(invsqrt * u2);\n\t\tconst zInv = mod(D1 * D2 * t);\n\t\tlet D;\n\t\tif (edIsNegative(t * zInv)) {\n\t\t\tlet _x = mod(y * SQRT_M1);\n\t\t\tlet _y = mod(x * SQRT_M1);\n\t\t\tx = _x;\n\t\t\ty = _y;\n\t\t\tD = mod(D1 * INVSQRT_A_MINUS_D);\n\t\t} else {\n\t\t\tD = D2;\n\t\t}\n\t\tif (edIsNegative(x * zInv))\n\t\t\ty = mod(-y);\n\t\tlet s = mod((z - y) * D);\n\t\tif (edIsNegative(s))\n\t\t\ts = mod(-s);\n\t\treturn numberTo32BytesLE(s);\n\t}\n\ttoHex() {\n\t\treturn bytesToHex(this.toRawBytes());\n\t}\n\ttoString() {\n\t\treturn this.toHex();\n\t}\n\tequals(other) {\n\t\tassertRstPoint(other);\n\t\tconst a = this.ep;\n\t\tconst b = other.ep;\n\t\tconst one = mod(a.x * b.y) === mod(a.y * b.x);\n\t\tconst two = mod(a.y * b.y) === mod(a.x * b.x);\n\t\treturn one || two;\n\t}\n\tadd(other) {\n\t\tassertRstPoint(other);\n\t\treturn new RistrettoPoint(this.ep.add(other.ep));\n\t}\n\tsubtract(other) {\n\t\tassertRstPoint(other);\n\t\treturn new RistrettoPoint(this.ep.subtract(other.ep));\n\t}\n\tmultiply(scalar) {\n\t\treturn new RistrettoPoint(this.ep.multiply(scalar));\n\t}\n\tmultiplyUnsafe(scalar) {\n\t\treturn new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n\t}\n}\n\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\n\nclass Point {\n\tconstructor(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\t_setWindowSize(windowSize) {\n\t\tthis._WINDOW_SIZE = windowSize;\n\t\tpointPrecomputes.delete(this);\n\t}\n\tstatic fromHex(hex, strict = true) {\n\t\tconst {\n\t\t\td,\n\t\t\tP\n\t\t} = CURVE;\n\t\thex = ensureBytes(hex, 32);\n\t\tconst normed = hex.slice();\n\t\tnormed[31] = hex[31] & ~0x80;\n\t\tconst y = bytesToNumberLE(normed);\n\t\tif (strict && y >= P)\n\t\t\tthrow new Error('Expected 0 < hex < P');\n\t\tif (!strict && y >= MAX_256B)\n\t\t\tthrow new Error('Expected 0 < hex < 2**256');\n\t\tconst y2 = mod(y * y);\n\t\tconst u = mod(y2 - _1n);\n\t\tconst v = mod(d * y2 + _1n);\n\t\tlet {\n\t\t\tisValid,\n\t\t\tvalue: x\n\t\t} = uvRatio(u, v);\n\t\tif (!isValid)\n\t\t\tthrow new Error('Point.fromHex: invalid y coordinate');\n\t\tconst isXOdd = (x & _1n) === _1n;\n\t\tconst isLastByteOdd = (hex[31] & 0x80) !== 0;\n\t\tif (isLastByteOdd !== isXOdd) {\n\t\t\tx = mod(-x);\n\t\t}\n\t\treturn new Point(x, y);\n\t}\n\tstatic async fromPrivateKey(privateKey) {\n\t\treturn (await getExtendedPublicKey(privateKey)).point;\n\t}\n\ttoRawBytes() {\n\t\tconst bytes = numberTo32BytesLE(this.y);\n\t\tbytes[31] |= this.x & _1n ? 0x80 : 0;\n\t\treturn bytes;\n\t}\n\ttoHex() {\n\t\treturn bytesToHex(this.toRawBytes());\n\t}\n\ttoX25519() {\n\t\tconst {\n\t\t\ty\n\t\t} = this;\n\t\tconst u = mod((_1n + y) * invert(_1n - y));\n\t\treturn numberTo32BytesLE(u);\n\t}\n\tisTorsionFree() {\n\t\treturn ExtendedPoint.fromAffine(this).isTorsionFree();\n\t}\n\tequals(other) {\n\t\treturn this.x === other.x && this.y === other.y;\n\t}\n\tnegate() {\n\t\treturn new Point(mod(-this.x), this.y);\n\t}\n\tadd(other) {\n\t\treturn ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n\t}\n\tsubtract(other) {\n\t\treturn this.add(other.negate());\n\t}\n\tmultiply(scalar) {\n\t\treturn ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n\t}\n}\n\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\n\nclass Signature {\n\tconstructor(r, s) {\n\t\tthis.r = r;\n\t\tthis.s = s;\n\t\tthis.assertValidity();\n\t}\n\tstatic fromHex(hex) {\n\t\tconst bytes = ensureBytes(hex, 64);\n\t\tconst r = Point.fromHex(bytes.slice(0, 32), false);\n\t\tconst s = bytesToNumberLE(bytes.slice(32, 64));\n\t\treturn new Signature(r, s);\n\t}\n\tassertValidity() {\n\t\tconst {\n\t\t\tr,\n\t\t\ts\n\t\t} = this;\n\t\tif (!(r instanceof Point))\n\t\t\tthrow new Error('Expected Point instance');\n\t\tnormalizeScalar(s, CURVE.l, false);\n\t\treturn this;\n\t}\n\ttoRawBytes() {\n\t\tconst u8 = new Uint8Array(64);\n\t\tu8.set(this.r.toRawBytes());\n\t\tu8.set(numberTo32BytesLE(this.s), 32);\n\t\treturn u8;\n\t}\n\ttoHex() {\n\t\treturn bytesToHex(this.toRawBytes());\n\t}\n}\n\nfunction concatBytes(...arrays) {\n\tif (!arrays.every((a) => a instanceof Uint8Array))\n\t\tthrow new Error('Expected Uint8Array list');\n\tif (arrays.length === 1)\n\t\treturn arrays[0];\n\tconst length = arrays.reduce((a, arr) => a + arr.length, 0);\n\tconst result = new Uint8Array(length);\n\tfor (let i = 0, pad = 0; i < arrays.length; i++) {\n\t\tconst arr = arrays[i];\n\t\tresult.set(arr, pad);\n\t\tpad += arr.length;\n\t}\n\treturn result;\n}\n\nconst hexes = Array.from({\n\tlength: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n\nfunction bytesToHex(uint8a) {\n\tif (!(uint8a instanceof Uint8Array))\n\t\tthrow new Error('Uint8Array expected');\n\tlet hex = '';\n\tfor (let i = 0; i < uint8a.length; i++) {\n\t\thex += hexes[uint8a[i]];\n\t}\n\treturn hex;\n}\n\nfunction hexToBytes(hex) {\n\tif (typeof hex !== 'string') {\n\t\tthrow new TypeError('hexToBytes: expected string, got ' + typeof hex);\n\t}\n\tif (hex.length % 2)\n\t\tthrow new Error('hexToBytes: received invalid unpadded hex');\n\tconst array = new Uint8Array(hex.length / 2);\n\tfor (let i = 0; i < array.length; i++) {\n\t\tconst j = i * 2;\n\t\tconst hexByte = hex.slice(j, j + 2);\n\t\tconst byte = Number.parseInt(hexByte, 16);\n\t\tif (Number.isNaN(byte) || byte < 0)\n\t\t\tthrow new Error('Invalid byte sequence');\n\t\tarray[i] = byte;\n\t}\n\treturn array;\n}\n\nfunction numberTo32BytesBE(num) {\n\tconst length = 32;\n\tconst hex = num.toString(16).padStart(length * 2, '0');\n\treturn hexToBytes(hex);\n}\n\nfunction numberTo32BytesLE(num) {\n\treturn numberTo32BytesBE(num).reverse();\n}\n\nfunction edIsNegative(num) {\n\treturn (mod(num) & _1n) === _1n;\n}\n\nfunction bytesToNumberLE(uint8a) {\n\tif (!(uint8a instanceof Uint8Array))\n\t\tthrow new Error('Expected Uint8Array');\n\treturn BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\n\nfunction bytes255ToNumberLE(bytes) {\n\treturn mod(bytesToNumberLE(bytes) & (_2n ** _255n - _1n));\n}\n\nfunction mod(a, b = CURVE.P) {\n\tconst res = a % b;\n\treturn res >= _0n ? res : b + res;\n}\n\nfunction invert(number, modulo = CURVE.P) {\n\tif (number === _0n || modulo <= _0n) {\n\t\tthrow new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n\t}\n\tlet a = mod(number, modulo);\n\tlet b = modulo;\n\tlet x = _0n,\n\t\tu = _1n;\n\twhile (a !== _0n) {\n\t\tconst q = b / a;\n\t\tconst r = b % a;\n\t\tconst m = x - u * q;\n\t\tb = a, a = r, x = u, u = m;\n\t}\n\tconst gcd = b;\n\tif (gcd !== _1n)\n\t\tthrow new Error('invert: does not exist');\n\treturn mod(x, modulo);\n}\n\nfunction invertBatch(nums, p = CURVE.P) {\n\tconst tmp = new Array(nums.length);\n\tconst lastMultiplied = nums.reduce((acc, num, i) => {\n\t\tif (num === _0n)\n\t\t\treturn acc;\n\t\ttmp[i] = acc;\n\t\treturn mod(acc * num, p);\n\t}, _1n);\n\tconst inverted = invert(lastMultiplied, p);\n\tnums.reduceRight((acc, num, i) => {\n\t\tif (num === _0n)\n\t\t\treturn acc;\n\t\ttmp[i] = mod(acc * tmp[i], p);\n\t\treturn mod(acc * num, p);\n\t}, inverted);\n\treturn tmp;\n}\n\nfunction pow2(x, power) {\n\tconst {\n\t\tP\n\t} = CURVE;\n\tlet res = x;\n\twhile (power-- > _0n) {\n\t\tres *= res;\n\t\tres %= P;\n\t}\n\treturn res;\n}\n\nfunction pow_2_252_3(x) {\n\tconst {\n\t\tP\n\t} = CURVE;\n\tconst _5n = BigInt(5);\n\tconst _10n = BigInt(10);\n\tconst _20n = BigInt(20);\n\tconst _40n = BigInt(40);\n\tconst _80n = BigInt(80);\n\tconst x2 = (x * x) % P;\n\tconst b2 = (x2 * x) % P;\n\tconst b4 = (pow2(b2, _2n) * b2) % P;\n\tconst b5 = (pow2(b4, _1n) * x) % P;\n\tconst b10 = (pow2(b5, _5n) * b5) % P;\n\tconst b20 = (pow2(b10, _10n) * b10) % P;\n\tconst b40 = (pow2(b20, _20n) * b20) % P;\n\tconst b80 = (pow2(b40, _40n) * b40) % P;\n\tconst b160 = (pow2(b80, _80n) * b80) % P;\n\tconst b240 = (pow2(b160, _80n) * b80) % P;\n\tconst b250 = (pow2(b240, _10n) * b10) % P;\n\tconst pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n\treturn {\n\t\tpow_p_5_8,\n\t\tb2\n\t};\n}\n\nfunction uvRatio(u, v) {\n\tconst v3 = mod(v * v * v);\n\tconst v7 = mod(v3 * v3 * v);\n\tconst pow = pow_2_252_3(u * v7).pow_p_5_8;\n\tlet x = mod(u * v3 * pow);\n\tconst vx2 = mod(v * x * x);\n\tconst root1 = x;\n\tconst root2 = mod(x * SQRT_M1);\n\tconst useRoot1 = vx2 === u;\n\tconst useRoot2 = vx2 === mod(-u);\n\tconst noRoot = vx2 === mod(-u * SQRT_M1);\n\tif (useRoot1)\n\t\tx = root1;\n\tif (useRoot2 || noRoot)\n\t\tx = root2;\n\tif (edIsNegative(x))\n\t\tx = mod(-x);\n\treturn {\n\t\tisValid: useRoot1 || useRoot2,\n\t\tvalue: x\n\t};\n}\n\nfunction invertSqrt(number) {\n\treturn uvRatio(_1n, number);\n}\n\nasync function sha512ModqLE(...args) {\n\tconst hash = await utils.sha512(concatBytes(...args));\n\tconst value = bytesToNumberLE(hash);\n\treturn mod(value, CURVE.l);\n}\n\nfunction equalBytes(b1, b2) {\n\tif (b1.length !== b2.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < b1.length; i++) {\n\t\tif (b1[i] !== b2[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction ensureBytes(hex, expectedLength) {\n\tconst bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n\tif (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n\t\tthrow new Error(`Expected ${expectedLength} bytes`);\n\treturn bytes;\n}\n\nfunction normalizeScalar(num, max, strict = true) {\n\tif (!max)\n\t\tthrow new TypeError('Specify max value');\n\tif (typeof num === 'number' && Number.isSafeInteger(num))\n\t\tnum = BigInt(num);\n\tif (typeof num === 'bigint' && num < max) {\n\t\tif (strict) {\n\t\t\tif (_0n < num)\n\t\t\t\treturn num;\n\t\t} else {\n\t\t\tif (_0n <= num)\n\t\t\t\treturn num;\n\t\t}\n\t}\n\tthrow new TypeError('Expected valid scalar: 0 < scalar < max');\n}\n\nfunction adjustBytes25519(bytes) {\n\tbytes[0] &= 248;\n\tbytes[31] &= 127;\n\tbytes[31] |= 64;\n\treturn bytes;\n}\n\nfunction decodeScalar25519(n) {\n\treturn bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\n\nasync function getExtendedPublicKey(key) {\n\t// console.debug(key, typeof key);\n\tkey =\n\t\ttypeof key === 'bigint' || typeof key === 'number' ?\n\t\tnumberTo32BytesBE(normalizeScalar(key, MAX_256B)) :\n\t\tensureBytes(key);\n\tif (key.length !== 32)\n\t\tthrow new Error(`Expected 32 bytes. Given: ` + key.length);\n\tconst hashed = await utils.sha512(key);\n\tconst head = adjustBytes25519(hashed.slice(0, 32));\n\tconst prefix = hashed.slice(32, 64);\n\tconst scalar = mod(bytesToNumberLE(head), CURVE.l);\n\tconst point = Point.BASE.multiply(scalar);\n\tconst pointBytes = point.toRawBytes();\n\treturn {\n\t\thead,\n\t\tprefix,\n\t\tscalar,\n\t\tpoint,\n\t\tpointBytes\n\t};\n}\nasync function getPublicKey(privateKey) {\n\treturn (await getExtendedPublicKey(privateKey)).pointBytes;\n}\n\nasync function sign(message, privateKey) {\n\tmessage = ensureBytes(message);\n\tconst {\n\t\tprefix,\n\t\tscalar,\n\t\tpointBytes\n\t} = await getExtendedPublicKey(privateKey);\n\tconst r = await sha512ModqLE(prefix, message);\n\tconst R = Point.BASE.multiply(r);\n\tconst k = await sha512ModqLE(R.toRawBytes(), pointBytes, message);\n\tconst s = mod(r + k * scalar, CURVE.l);\n\treturn new Signature(R, s).toRawBytes();\n}\n\nasync function verify(sig, message, publicKey) {\n\tmessage = ensureBytes(message);\n\tif (!(publicKey instanceof Point))\n\t\tpublicKey = Point.fromHex(publicKey, false);\n\tconst {\n\t\tr,\n\t\ts\n\t} = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n\tconst SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n\tconst k = await sha512ModqLE(r.toRawBytes(), publicKey.toRawBytes(), message);\n\tconst kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n\tconst RkA = ExtendedPoint.fromAffine(r).add(kA);\n\treturn RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\n\nasync function getSharedSecret(privateKey, publicKey) {\n\tconst {\n\t\thead\n\t} = await getExtendedPublicKey(privateKey);\n\tconst u = Point.fromHex(publicKey).toX25519();\n\treturn curve25519.scalarMult(head, u);\n}\n\nPoint.BASE._setWindowSize(8);\n\nfunction cswap(swap, x_2, x_3) {\n\tconst dummy = mod(swap * (x_2 - x_3));\n\tx_2 = mod(x_2 - dummy);\n\tx_3 = mod(x_3 + dummy);\n\treturn [x_2, x_3];\n}\n\nfunction montgomeryLadder(pointU, scalar) {\n\tconst {\n\t\tP\n\t} = CURVE;\n\tconst u = normalizeScalar(pointU, P);\n\tconst k = normalizeScalar(scalar, P);\n\tconst a24 = BigInt(121665);\n\tconst x_1 = u;\n\tlet x_2 = _1n;\n\tlet z_2 = _0n;\n\tlet x_3 = u;\n\tlet z_3 = _1n;\n\tlet swap = _0n;\n\tlet sw;\n\tfor (let t = BigInt(255 - 1); t >= _0n; t--) {\n\t\tconst k_t = (k >> t) & _1n;\n\t\tswap ^= k_t;\n\t\tsw = cswap(swap, x_2, x_3);\n\t\tx_2 = sw[0];\n\t\tx_3 = sw[1];\n\t\tsw = cswap(swap, z_2, z_3);\n\t\tz_2 = sw[0];\n\t\tz_3 = sw[1];\n\t\tswap = k_t;\n\t\tconst A = x_2 + z_2;\n\t\tconst AA = mod(A * A);\n\t\tconst B = x_2 - z_2;\n\t\tconst BB = mod(B * B);\n\t\tconst E = AA - BB;\n\t\tconst C = x_3 + z_3;\n\t\tconst D = x_3 - z_3;\n\t\tconst DA = mod(D * A);\n\t\tconst CB = mod(C * B);\n\t\tx_3 = mod((DA + CB) ** _2n);\n\t\tz_3 = mod(x_1 * (DA - CB) ** _2n);\n\t\tx_2 = mod(AA * BB);\n\t\tz_2 = mod(E * (AA + mod(a24 * E)));\n\t}\n\tsw = cswap(swap, x_2, x_3);\n\tx_2 = sw[0];\n\tx_3 = sw[1];\n\tsw = cswap(swap, z_2, z_3);\n\tz_2 = sw[0];\n\tz_3 = sw[1];\n\tconst {\n\t\tpow_p_5_8,\n\t\tb2\n\t} = pow_2_252_3(z_2);\n\tconst xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n\treturn mod(x_2 * xp2);\n}\n\nfunction encodeUCoordinate(u) {\n\treturn numberTo32BytesLE(mod(u, CURVE.P));\n}\n\nfunction decodeUCoordinate(uEnc) {\n\tconst u = ensureBytes(uEnc, 32);\n\tu[31] &= 127;\n\treturn bytesToNumberLE(u);\n}\n\nconst curve25519 = {\n\tBASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n\tscalarMult(privateKey, publicKey) {\n\t\tconst u = decodeUCoordinate(publicKey);\n\t\tconst p = decodeScalar25519(privateKey);\n\t\tconst pu = montgomeryLadder(u, p);\n\t\tif (pu === _0n)\n\t\t\tthrow new Error('Invalid private or public key received');\n\t\treturn encodeUCoordinate(pu);\n\t},\n\tscalarMultBase(privateKey) {\n\t\treturn curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n\t},\n};\n\nconst crypto = {\n\tnode: nodeCrypto,\n\tweb: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n\nconst utils = {\n\tTORSION_SUBGROUP: [\n\t\t'0100000000000000000000000000000000000000000000000000000000000000',\n\t\t'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n\t\t'0000000000000000000000000000000000000000000000000000000000000080',\n\t\t'26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n\t\t'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n\t\t'26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n\t\t'0000000000000000000000000000000000000000000000000000000000000000',\n\t\t'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n\t],\n\tbytesToHex,\n\tgetExtendedPublicKey,\n\tmod,\n\tinvert,\n\thashToPrivateScalar: (hash) => {\n\t\thash = ensureBytes(hash);\n\t\tif (hash.length < 40 || hash.length > 1024)\n\t\t\tthrow new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n\t\tconst num = mod(bytesToNumberLE(hash), CURVE.l);\n\t\tif (num === _0n || num === _1n)\n\t\t\tthrow new Error('Invalid private key');\n\t\treturn num;\n\t},\n\trandomBytes: (bytesLength = 32) => {\n\t\tif (crypto.web) {\n\t\t\treturn crypto.web.getRandomValues(new Uint8Array(bytesLength));\n\t\t} else if (crypto.node) {\n\t\t\tconst {\n\t\t\t\trandomBytes\n\t\t\t} = crypto.node;\n\t\t\treturn new Uint8Array(randomBytes(bytesLength).buffer);\n\t\t} else {\n\t\t\tthrow new Error(\"The environment doesn't have randomBytes function\");\n\t\t}\n\t},\n\trandomPrivateKey: () => {\n\t\treturn utils.randomBytes(32);\n\t},\n\tsha512: async (message) => {\n\t\tif (crypto.web) {\n\t\t\tconst buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n\t\t\treturn new Uint8Array(buffer);\n\t\t} else if (crypto.node) {\n\t\t\treturn Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n\t\t} else {\n\t\t\tthrow new Error(\"The environment doesn't have sha512 function\");\n\t\t}\n\t},\n\tprecompute(windowSize = 8, point = Point.BASE) {\n\t\tconst cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n\t\tcached._setWindowSize(windowSize);\n\t\tcached.multiply(_2n);\n\t\treturn cached;\n\t},\n};\n\n// exports.CURVE = CURVE;\n// exports.ExtendedPoint = ExtendedPoint;\n// exports.Point = Point;\n// exports.RistrettoPoint = RistrettoPoint;\n// exports.Signature = Signature;\n// exports.curve25519 = curve25519;\n// exports.getPublicKey = getPublicKey;\n// exports.getSharedSecret = getSharedSecret;\n// exports.sign = sign;\n// exports.utils = utils;\n// exports.verify = verify;\n\n// Object.defineProperty(exports, '__esModule', {\n// \tvalue: true\n// });", "\"use strict\";\n\nimport * as ed from './noble-ed25519.js';\n\nexport {\n\tGenRadomKeyPairGUI,\n\tKeyFromSeedGUI,\n\tSignMsgGUI,\n\tVerifySigGUI,\n}\n\n// GUI Element variables\n//\n// Key encoding formats (e.g. \"Hex\" or \"B64\")\nvar KeyOptsElem;\n\n// DOM load\ndocument.addEventListener('DOMContentLoaded', () => {\n\tKeyOptsElem = document.getElementById('KeyOpts');\n\n\t// Set event listeners for buttons.\n\tdocument.getElementById('GenRandKeyPairBtn').addEventListener('click', GenRadomKeyPairGUI);\n\tdocument.getElementById('GenKeyPairBtn').addEventListener('click', KeyFromSeedGUI);\n\tdocument.getElementById('SignBtn').addEventListener('click', SignMsgGUI);\n\tdocument.getElementById('VerifyBtn').addEventListener('click', VerifySigGUI);\n});\n\n// Generates a new public private key pair, and sets the seed, private key, and\n// public key for the GUI In and Out sections.\nasync function GenRadomKeyPairGUI() {\n\tlet seed = crypto.getRandomValues(new Uint8Array(32));\n\tlet hex = await ArrayBufferToHex(seed);\n\tif (KeyOptsElem.value === \"Hex\") {\n\t\tseed = hex;\n\t} else {\n\t\tseed = await ArrayBufferTo64ut(seed);\n\t}\n\t// console.debug(seed)\n\tawait setSeedGUI(seed);\n\tsetKeyPairGUIFromHex(await HashHex(\"SHA-256\", hex));\n}\n\n// Generates an ed25519 public private key pair. Both outputs in the GUI will be\n// set, as well as setting the Input key pair (In the selected encoding).\nasync function KeyFromSeedGUI() {\n\tlet seed = document.getElementById('Seed').value;\n\tif (isEmpty(seed)) {\n\t\tconsole.debug('Seed is empty... seeing if private key is already set.');\n\t\tlet pk = await getPrivateKeyBytes();\n\t\tconsole.debug(pk)\n\t\tif (pk === null) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn;\n\t}\n\tawait setSeedGUI(seed);\n\tif (KeyOptsElem.value !== \"Hex\") {\n\t\tseed = B64ToHex(seed);\n\t}\n\tsetKeyPairGUIFromHex(await HashHex(\"SHA-256\", seed));\n}\n\n// Signs the current input message, depending on selected encoding method.\nasync function SignMsgGUI() {\n\tlet privateKeyBytes = await getPrivateKeyBytes();\n\tlet msgBytes = await getMessageBytes();\n\tif (privateKeyBytes === null || msgBytes === null) {\n\t\t// console.debug(\"private key or message is null.\");\n\t\treturn;\n\t}\n\t// Sets both application and GUI signature values.\n\tlet bytes = await ed.sign(msgBytes, privateKeyBytes);\n\tif (!ed25519SigLenCheck(bytes)) {\n\t\treturn;\n\t}\n\tlet Hex = await ArrayBufferToHex(bytes);\n\n\t// console.debug(Hex);\n\tif (isEmpty(Hex) || Hex.length % 2 === 1) {\n\t\tconsole.error('input is invalid Hex');\n\t\treturn;\n\t}\n\n\tdocument.getElementById(\"HexSig\").textContent = Hex;\n\tdocument.getElementById('B64Sig').textContent = await HexTob64ut(Hex);\n\tsetElemFromHex(document.getElementById('Signature'), Hex);\n}\n\n// Verifies the current signature with the current message and public key.\n// Populates the ValidSignature span with the fail/success message.\nasync function VerifySigGUI() {\n\tlet valid = false;\n\tlet msg = \"Invalid Signature\";\n\tlet sig = document.getElementById('Signature').value;\n\tlet signatureBytes = await getSignatureBytes();\n\tif (!isEmpty(sig) && ed25519SigLenCheck(signatureBytes)) {\n\t\ttry {\n\t\t\t// console.debug(signatureBytes, await getMessageBytes(), await getPublicKeyBytes());\n\t\t\tvalid = await ed.verify(signatureBytes, await getMessageBytes(), await getPublicKeyBytes());\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tvalid = false;\n\t\t} finally {\n\t\t\tif (valid) {\n\t\t\t\tmsg = \"Valid Signature\";\n\t\t\t}\n\t\t\t// console.debug(valid);\n\t\t}\n\t}\n\tdocument.getElementById('ValidSignature').textContent = msg;\n}\n\n\n///////////////////////////////////////////////\n//////////////////  Helpers  //////////////////\n///////////////////////////////////////////////\n\n// Sets the GUI In and Out sections' public private key pair values.\nasync function setKeyPairGUIFromHex(Hex) {\n\tlet privB64 = await HexTob64ut(Hex);\n\tlet pubHex = await ArrayBufferToHex(await ed.getPublicKey(new Uint8Array(await HexToArrayBuffer(Hex))));\n\tlet pubB64 = await HexTob64ut(pubHex);\n\t// Sets private key outputs\n\tdocument.getElementById('HexPriKey').textContent = Hex;\n\tdocument.getElementById('B64PriKey').textContent = privB64;\n\t// Sets public key outputs.\n\tdocument.getElementById('HexPubKey').textContent = pubHex;\n\tdocument.getElementById('B64PubKey').textContent = pubB64;\n\n\t// Sets key pair for inputs.\n\tlet priv;\n\tlet pub;\n\tif (KeyOptsElem.value === \"Hex\") {\n\t\tpriv = Hex;\n\t\tpub = pubHex;\n\t} else {\n\t\tpriv = privB64;\n\t\tpub = pubB64;\n\t}\n\t// Sets main public private key pair in the GUI In section.\n\tdocument.getElementById('PublicKey').value = pub;\n\tdocument.getElementById('PrivateKey').value = priv;\n}\n\n// Returns an UInt8Array of the current Private Key in the GUI.\n// If the private key is not populated, function errors and returns null.\nasync function getPrivateKeyBytes() {\n\tlet PrivateKey = document.getElementById('PrivateKey').value;\n\tif (isEmpty(PrivateKey)) {\n\t\tconsole.error('Private key is empty.');\n\t\treturn null;\n\t}\n\tif (KeyOptsElem.value !== \"Hex\") {\n\t\tPrivateKey = B64ToHex(PrivateKey);\n\t}\n\treturn new Uint8Array(await HexToArrayBuffer(PrivateKey));\n}\n\n// Returns an UInt8Array of the current Public Key in the GUI.\n// If the public key is not populated, the public key will attempt to be derived\n// from the seed, or private key. If both are empty, fails and returns null.\nasync function getPublicKeyBytes() {\n\tlet PublicKey = document.getElementById('PublicKey').value;\n\tif (isEmpty(PublicKey)) {\n\t\tconsole.debug('PublicKey is empty... Attempting to derive from private key.');\n\t\tlet PrivateKey = document.getElementById('PrivateKey').value;\n\t\tif (isEmpty(PrivateKey)) {\n\t\t\tconsole.debug('PrivateKey is empty... Attempting to derive from the seed.');\n\t\t\tlet seed = document.getElementById('Seed').value;\n\t\t\tif (isEmpty(seed)) {\n\t\t\t\tconsole.error('Seed is empty.');\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tif (KeyOptsElem.value !== \"Hex\") {\n\t\t\t\t\tseed = B64ToHex(seed);\n\t\t\t\t}\n\t\t\t\tPublicKey = await ArrayBufferToHex(await getPubKeyBytesFromPrivateKeyString(await HashHex(\"SHA-256\", seed)));\n\t\t\t}\n\t\t} else {\n\t\t\tPublicKey = await ArrayBufferToHex(await getPubKeyBytesFromPrivateKeyString(PrivateKey));\n\t\t}\n\t}\n\n\tif (KeyOptsElem.value !== \"Hex\") {\n\t\tPublicKey = B64ToHex(PublicKey);\n\t}\n\treturn new Uint8Array(await HexToArrayBuffer(PublicKey));\n}\n\n// Returns a UInt8Array of the public key, from the private key string.\nasync function getPubKeyBytesFromPrivateKeyString(string) {\n\tlet bytes;\n\tif (KeyOptsElem.value === \"Hex\") {\n\t\tbytes = await HexToArrayBuffer(string);\n\t} else {\n\t\tbytes = await HexToArrayBuffer(B64ToHex(string));\n\t}\n\treturn await ed.getPublicKey(new Uint8Array(bytes));\n}\n\n// Returns a UInt8Array of the current Signature in the GUI.\n// If the signature is not populated, fails and returns null.\nasync function getSignatureBytes() {\n\tlet Signature = document.getElementById('Signature').value;\n\tif (isEmpty(Signature)) {\n\t\tconsole.error('Signature is empty.');\n\t\treturn null;\n\t}\n\tif (KeyOptsElem.value !== \"Hex\") {\n\t\tSignature = B64ToHex(Signature);\n\t}\n\treturn new Uint8Array(await HexToArrayBuffer(Signature));\n}\n\n// Returns a UInt8Array of the current message in the GUI.\n// If message is empty, an empty UInt8Array will be returned.\nasync function getMessageBytes() {\n\tlet Message = document.getElementById('InputMsg').value;\n\tlet messageBytes = new Uint8Array(); // Empty message is valid.\n\n\t// console.debug(Message);\n\tif (!isEmpty(Message)) {\n\t\tswitch (document.getElementById('MsgOpts').value) {\n\t\t\tcase \"B64\":\n\t\t\t\tmessageBytes = new Uint8Array(await HexToArrayBuffer(B64ToHex(Message)));\n\t\t\t\tbreak;\n\t\t\tcase \"Hex\":\n\t\t\t\tmessageBytes = new Uint8Array(await HexToArrayBuffer(Message));\n\t\t\t\tbreak;\n\t\t\tcase \"Text\":\n\t\t\t\tlet enc = new TextEncoder(\"utf-8\"); // Suppose to be always in UTF-8.\n\t\t\t\tmessageBytes = enc.encode(Message);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.error('unsupported message encoding');\n\t\t\t\treturn null;\n\t\t}\n\t}\n\treturn messageBytes;\n}\n\n// Sets all of the seed values in the GUI from the given seed string.\n// Key encoding must be set accordingly to the passed seed, before calling this\n// function.\nasync function setSeedGUI(seed) {\n\tlet b64Seed;\n\tlet hexSeed;\n\tif (KeyOptsElem.value !== \"Hex\") {\n\t\tb64Seed = seed;\n\t\tseed = B64ToHex(seed);\n\t\thexSeed = seed;\n\t} else {\n\t\thexSeed = seed;\n\t\tb64Seed = await HexTob64ut(seed);\n\t}\n\t// console.debug(b64Seed, hexSeed, seed);\n\n\tdocument.getElementById('B64Seed').textContent = b64Seed;\n\tdocument.getElementById('HexSeed').textContent = hexSeed;\n\tsetElemFromHex(document.getElementById('Seed'), seed);\n}\n\n// Sets the given element's value with the given Hex value, based on the selected\n// Key Options.\n// Will not work if the given element is a span. .textContent instead of .value\n// is needed for spans.\nasync function setElemFromHex(elem, Hex) {\n\t// console.debug(elem, Hex);\n\tif (KeyOptsElem.value === \"Hex\") {\n\t\telem.value = Hex;\n\t\treturn;\n\t}\n\telem.value = await HexTob64ut(Hex);\n}\n\n// Returns false if the byte length is incorrect, and true with correct length.\nfunction ed25519SigLenCheck(bytes) {\n\tif (isEmpty(bytes.byteLength) || bytes.byteLength !== 64) {\n\t\tconsole.error(\"Invalid Signature length\");\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n\n////////////////////////////////\n// Taken from Cyphrme Lib\n////////////////////////////////\n\n/**\n * B64ToHex takes any RFC 4648 base64 to Hex.\n * \n * @param    {string} b64        RFC 4648 any base64.\n * @returns  {string}            Hex representation.\n */\nfunction B64ToHex(b64) {\n\t//  console.debug(b64);\n\tlet ub64 = URISafeToUnsafe(b64);\n\tconst raw = atob(ub64);\n\tlet result = '';\n\tfor (let i = 0; i < raw.length; i++) {\n\t\tconst hex = raw.charCodeAt(i).toString(16).toUpperCase();\n\t\tresult += (hex.length === 2 ? hex : '0' + hex);\n\t}\n\treturn result;\n};\n\n/**\n * URISafeToUnsafe converts any URI safe string to URI unsafe.  \n * \n * @param   {string} b64ut \n * @returns {string} ub64t\n */\nfunction URISafeToUnsafe(ub64) {\n\treturn ub64.replace(/-/g, '+').replace(/_/g, '/');\n};\n\n/**\n * HexTob64ut is hex to \"RFC 4648 URI Safe Truncated\".  \n * \n * @param   {string} hex    String. Hex representation.\n * @returns {string}        String. b64ut RFC 4648 URI safe truncated.\n */\nasync function HexTob64ut(hex) {\n\tlet ab = await HexToArrayBuffer(hex);\n\treturn await ArrayBufferTo64ut(ab);\n};\n\n/**\n * URIUnsafeToSafe converts any URI unsafe string to URI safe.  \n * \n * @param   {string} ub64t \n * @returns {string} b64ut \n */\nfunction URIUnsafeToSafe(ub64) {\n\treturn ub64.replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\n/**\n * base64t removes base64 padding if applicable.\n * @param   {string} base64 \n * @returns {string} base64t\n */\nfunction base64t(base64) {\n\treturn base64.replace(/=/g, '');\n}\n\n/**\n * ArrayBufferTo64ut Array buffer to b64ut.\n * \n * @param   {ArrayBuffer}  buffer \n * @returns {string}       String. base64ut.\n */\nfunction ArrayBufferTo64ut(buffer) {\n\tvar string = String.fromCharCode.apply(null, new Uint8Array(buffer));\n\treturn base64t(URIUnsafeToSafe(btoa(string)));\n};\n\n// Returns the digest (in Hex) from the given Hex input and hash alg. Throws.\nasync function HashHex(hashAlg, Hex) {\n\t// console.debug(hashAlg, input);\n\tif (isEmpty(hashAlg)) {\n\t\tthrow new Error(\"No hash algorithm specified\");\n\t}\n\treturn ArrayBufferToHex(await crypto.subtle.digest(hashAlg, await HexToArrayBuffer(Hex)));\n}\n\n/**\n * Taken from https://github.com/LinusU/hex-to-array-buffer  MIT license\n * @param   {string} Hex         String. Hexrepresentation\n * @returns {ArrayBuffer}        ArrayBuffer. \n */\nasync function HexToArrayBuffer(hex) {\n\tif (typeof hex !== 'string') {\n\t\t// console.debug(typeof hex);\n\t\tthrow new TypeError('base_convert.HexToArrayBuffer: Expected input to be a string')\n\t}\n\n\tif ((hex.length % 2) !== 0) {\n\t\tthrow new RangeError('base_convert.HexToArrayBuffer: Expected string to be an even number of characters')\n\t}\n\n\tvar view = new Uint8Array(hex.length / 2)\n\n\tfor (var i = 0; i < hex.length; i += 2) {\n\t\tview[i / 2] = parseInt(hex.substring(i, i + 2), 16)\n\t}\n\n\treturn view.buffer\n};\n\n/**\n * ArrayBufferToHex accepts an array buffer and returns a string of hex.\n * Taken from https://stackoverflow.com/a/50767210/1923095\n * \n * @param {ArrayBuffer} buffer       str that is being converted to UTF8\n * @returns {string} hex             String with hex.  \n */\nasync function ArrayBufferToHex(buffer) {\n\treturn [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, \"0\")).join('').toUpperCase();\n\n\t// Alternatively:\n\t// let hashArray = Array.from(new Uint8Array(digest)); // convert buffer to byte array\n\t// let hexHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n};\n\n/**\n * isEmpty is a helper function to determine if thing is empty. \n * \n * Objects are empty if they have no keys. (Returns len === 0 of object keys.)\n *\n * Functions are considered always not empty. \n * \n * NaN returns true.  (NaN === NaN is always false, as NaN is never equal to\n * anything. NaN is the only JavaScript value unequal to itself.)\n *\n * Don't use on HTMl elements. For HTML elements, use the !== equality check\n * (element !== null).\n *\n * Cannot use CryptoKey with this function since (len === 0) always. \n *\n * @param   {any}     thing    Thing you wish was empty.  \n * @returns {boolean}          Boolean.  \n */\nfunction isEmpty(thing) {\n\tif (typeof thing === 'function') {\n\t\treturn false;\n\t}\n\n\tif (thing === Object(thing)) {\n\t\tif (Object.keys(thing).length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tif (!isBool(thing)) {\n\t\treturn true;\n\t}\n\treturn false\n};\n\n/**\n * Helper function to determine boolean.  \n *\n * Javascript, instead of considering everything false except a few key words,\n * decided everything is true instead of a few key words.  Why?  Because\n * Javascript.  This function inverts that assumption, so that everything can be\n * considered false unless true. \n *\n * @param   {any}      bool   Thing that you wish was a boolean.  \n * @returns {boolean}         An actual boolean.  \n */\nfunction isBool(bool) {\n\tif (\n\t\tbool === false ||\n\t\tbool === \"false\" ||\n\t\tbool === undefined ||\n\t\tbool === \"undefined\" ||\n\t\tbool === \"\" ||\n\t\tbool === 0 ||\n\t\tbool === \"0\" ||\n\t\tbool === null ||\n\t\tbool === \"null\" ||\n\t\tbool === \"NaN\" ||\n\t\tNumber.isNaN(bool) ||\n\t\tbool === Object(bool) // isObject\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n};"],
  "mappings": "AAgCA,GAAM,IAAa,GAEnB,AACA,GAAM,GAAM,OAAO,GACb,EAAM,OAAO,GACb,EAAM,OAAO,GACb,GAAQ,OAAO,KACf,GAAc,GAAO,OAAO,KAAO,OAAO,0CAC1C,EAAQ,CACb,EAAG,OAAO,IACV,EAAG,OAAO,iFACV,EAAG,GAAO,GAAQ,OAAO,IACzB,EAAG,GACH,EAAG,GACH,EAAG,OAAO,GACV,GAAI,OAAO,iFACX,GAAI,OAAO,kFAEN,GAAW,GAAO,OAAO,KACzB,EAAU,OAAO,iFACvB,OAAO,gFACP,GAAM,IAAoB,OAAO,iFAC3B,GAAoB,OAAO,iFAC3B,GAAiB,OAAO,gFACxB,GAAiB,OAAO,iFAE9B,OAAoB,CACnB,YAAY,EAAG,EAAG,EAAG,EAAG,CACvB,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,QAEH,YAAW,EAAG,CACpB,GAAI,CAAE,aAAa,IAClB,KAAM,IAAI,WAAU,4CAErB,MAAI,GAAE,OAAO,EAAM,MACX,EAAc,KACf,GAAI,GAAc,EAAE,EAAG,EAAE,EAAG,EAAK,EAAI,EAAE,EAAI,EAAE,UAE9C,eAAc,EAAQ,CAC5B,GAAM,GAAQ,GAAY,EAAO,IAAI,AAAC,GAAM,EAAE,IAC9C,MAAO,GAAO,IAAI,CAAC,EAAG,IAAM,EAAE,SAAS,EAAM,WAEvC,YAAW,EAAQ,CACzB,MAAO,MAAK,cAAc,GAAQ,IAAI,KAAK,YAE5C,OAAO,EAAO,CACb,GAAe,GACf,GAAM,CACL,EAAG,EACH,EAAG,EACH,EAAG,GACA,KACE,CACL,EAAG,EACH,EAAG,EACH,EAAG,GACA,EACE,EAAO,EAAI,EAAK,GAChB,EAAO,EAAI,EAAK,GAChB,EAAO,EAAI,EAAK,GAChB,EAAO,EAAI,EAAK,GACtB,MAAO,KAAS,GAAQ,IAAS,EAElC,QAAS,CACR,MAAO,IAAI,GAAc,EAAI,CAAC,KAAK,GAAI,KAAK,EAAG,KAAK,EAAG,EAAI,CAAC,KAAK,IAElE,QAAS,CACR,GAAM,CACL,EAAG,EACH,EAAG,EACH,EAAG,GACA,KACE,CACL,KACG,EACE,EAAI,EAAI,GAAM,GACd,EAAI,EAAI,GAAM,GACd,EAAI,EAAI,EAAM,EAAI,GAAM,IACxB,EAAI,EAAI,EAAI,GACZ,EAAI,EAAI,EAAK,GAAK,IAAO,GAAO,EAAI,GACpC,EAAI,EAAI,EACR,EAAI,EAAI,EACR,EAAI,EAAI,EACR,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GACnB,MAAO,IAAI,GAAc,EAAI,EAAI,EAAI,GAEtC,IAAI,EAAO,CACV,GAAe,GACf,GAAM,CACL,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GACA,KACE,CACL,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GACA,EACE,EAAI,EAAK,GAAK,GAAO,GAAK,IAC1B,EAAI,EAAK,GAAK,GAAO,GAAK,IAC1B,EAAI,EAAI,EAAI,GAClB,GAAI,IAAM,EACT,MAAO,MAAK,SACb,GAAM,GAAI,EAAI,EAAK,EAAM,GACnB,EAAI,EAAI,EAAK,EAAM,GACnB,EAAI,EAAI,EACR,EAAI,EAAI,EACR,EAAI,EAAI,EACR,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GACnB,MAAO,IAAI,GAAc,EAAI,EAAI,EAAI,GAEtC,SAAS,EAAO,CACf,MAAO,MAAK,IAAI,EAAM,UAEvB,iBAAiB,EAAG,CACnB,GAAM,GAAU,EAAI,IAAM,EACpB,EAAS,GACX,EAAI,KACJ,EAAO,EACX,OAAS,GAAS,EAAG,EAAS,EAAS,IAAU,CAChD,EAAO,EACP,EAAO,KAAK,GACZ,OAAS,GAAI,EAAG,EAAI,GAAM,GAAI,GAAI,IACjC,EAAO,EAAK,IAAI,GAChB,EAAO,KAAK,GAEb,EAAI,EAAK,SAEV,MAAO,GAER,KAAK,EAAG,EAAa,CACpB,AAAI,CAAC,GAAe,KAAK,OAAO,EAAc,OAC7C,GAAc,EAAM,MACrB,GAAM,GAAK,GAAe,EAAY,cAAiB,EACvD,GAAI,IAAM,EACT,KAAM,IAAI,OAAM,iEAEjB,GAAI,GAAc,GAAe,EAAiB,IAAI,GACtD,AAAK,GACJ,GAAc,KAAK,iBAAiB,GAChC,GAAe,IAAM,GACxB,GAAc,EAAc,WAAW,GACvC,EAAiB,IAAI,EAAa,KAGpC,GAAI,GAAI,EAAc,KAClB,EAAI,EAAc,KAChB,EAAU,EAAI,IAAM,EACpB,EAAa,GAAM,GAAI,GACvB,EAAO,OAAO,GAAK,EAAI,GACvB,EAAY,GAAK,EACjB,EAAU,OAAO,GACvB,OAAS,GAAS,EAAG,EAAS,EAAS,IAAU,CAChD,GAAM,GAAS,EAAS,EACpB,EAAQ,OAAO,EAAI,GAMvB,GALA,IAAM,EACF,EAAQ,GACX,IAAS,EACT,GAAK,GAEF,IAAU,EAAG,CAChB,GAAI,GAAK,EAAY,GACrB,AAAI,EAAS,GACZ,GAAK,EAAG,UACT,EAAI,EAAE,IAAI,OACJ,CACN,GAAI,GAAS,EAAY,EAAS,KAAK,IAAI,GAAS,GACpD,AAAI,EAAQ,GACX,GAAS,EAAO,UACjB,EAAI,EAAE,IAAI,IAGZ,MAAO,GAAc,WAAW,CAAC,EAAG,IAAI,GAEzC,SAAS,EAAQ,EAAa,CAC7B,MAAO,MAAK,KAAK,EAAgB,EAAQ,EAAM,GAAI,GAEpD,eAAe,EAAQ,CACtB,GAAI,GAAI,EAAgB,EAAQ,EAAM,EAAG,IACnC,EAAI,EAAc,KAClB,EAAK,EAAc,KACzB,GAAI,IAAM,EACT,MAAO,GACR,GAAI,KAAK,OAAO,IAAO,IAAM,EAC5B,MAAO,MACR,GAAI,KAAK,OAAO,GACf,MAAO,MAAK,KAAK,GAClB,GAAI,GAAI,EACJ,EAAI,KACR,KAAO,EAAI,GACV,AAAI,EAAI,GACP,GAAI,EAAE,IAAI,IACX,EAAI,EAAE,SACN,IAAM,EAEP,MAAO,GAER,cAAe,CACd,MAAO,MAAK,eAAe,EAAM,GAAG,OAAO,EAAc,MAE1D,eAAgB,CACf,MAAO,MAAK,eAAe,EAAM,GAAG,OAAO,EAAc,MAE1D,SAAS,EAAO,EAAO,KAAK,GAAI,CAC/B,GAAM,CACL,IACA,IACA,KACG,KACE,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GAEnB,GAAI,AADO,EAAI,EAAI,KACR,EACV,KAAM,IAAI,OAAM,oBACjB,MAAO,IAAI,GAAM,EAAI,GAEtB,oBAAqB,CACpB,IAED,kBAAmB,CAClB,IAED,mBAAoB,CACnB,MAIF,EAAc,KAAO,GAAI,GAAc,EAAM,GAAI,EAAM,GAAI,EAAK,EAAI,EAAM,GAAK,EAAM,KACrF,EAAc,KAAO,GAAI,GAAc,EAAK,EAAK,EAAK,GAEtD,YAAwB,EAAO,CAC9B,GAAI,CAAE,aAAiB,IACtB,KAAM,IAAI,WAAU,0BAGtB,WAAwB,EAAO,CAC9B,GAAI,CAAE,aAAiB,IACtB,KAAM,IAAI,WAAU,2BAGtB,YAAsB,CACrB,KAAM,IAAI,OAAM,2CAGjB,WAAqB,CACpB,YAAY,EAAI,CACf,KAAK,GAAK,QAEJ,2BAA0B,EAAI,CACpC,GAAM,CACL,KACG,EACE,EAAI,EAAI,EAAU,EAAK,GACvB,EAAK,EAAK,GAAI,GAAO,IACvB,EAAI,OAAO,IACT,EAAI,EAAK,GAAI,EAAI,GAAK,EAAI,EAAI,IAChC,CACH,QAAS,EACT,MAAO,GACJ,EAAQ,EAAI,GACZ,EAAK,EAAI,EAAI,GACjB,AAAK,EAAa,IACjB,GAAK,EAAI,CAAC,IACN,GACJ,GAAI,GACA,GACJ,GAAI,GACL,GAAM,GAAK,EAAI,EAAK,GAAI,GAAO,GAAiB,GAC1C,EAAK,EAAI,EACT,EAAK,EAAK,GAAI,GAAK,GACnB,EAAK,EAAI,EAAK,IACd,EAAK,EAAI,EAAM,GACf,EAAK,EAAI,EAAM,GACrB,MAAO,IAAI,GAAc,EAAI,EAAK,GAAK,EAAI,EAAK,GAAK,EAAI,EAAK,GAAK,EAAI,EAAK,UAEtE,aAAY,EAAK,CACvB,EAAM,EAAY,EAAK,IACvB,GAAM,GAAK,EAAmB,EAAI,MAAM,EAAG,KACrC,EAAK,KAAK,0BAA0B,GACpC,EAAK,EAAmB,EAAI,MAAM,GAAI,KACtC,EAAK,KAAK,0BAA0B,GAC1C,MAAO,IAAI,GAAe,EAAG,IAAI,UAE3B,SAAQ,EAAK,CACnB,EAAM,EAAY,EAAK,IACvB,GAAM,CACL,IACA,KACG,EACE,EAAO,0EACP,EAAI,EAAmB,GAC7B,GAAI,CAAC,GAAW,EAAkB,GAAI,IAAQ,EAAa,GAC1D,KAAM,IAAI,OAAM,GACjB,GAAM,GAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAM,EAAI,GACnB,EAAK,EAAI,EAAM,EAAI,GACnB,EAAO,EAAI,EAAK,GAChB,EAAO,EAAI,EAAK,GAChB,EAAI,EAAI,EAAI,EAAI,EAAO,GACvB,CACL,UACA,MAAO,GACJ,GAAW,EAAI,EAAI,IACjB,EAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,EAAK,GACpB,EAAI,EAAK,GAAI,GAAK,GACtB,AAAI,EAAa,IAChB,GAAI,EAAI,CAAC,IACV,GAAM,GAAI,EAAI,EAAK,GACb,EAAI,EAAI,EAAI,GAClB,GAAI,CAAC,GAAW,EAAa,IAAM,IAAM,EACxC,KAAM,IAAI,OAAM,GACjB,MAAO,IAAI,GAAe,GAAI,GAAc,EAAG,EAAG,EAAK,IAExD,YAAa,CACZ,GAAI,CACH,IACA,IACA,IACA,KACG,KAAK,GACH,EAAK,EAAI,EAAI,EAAI,GAAK,EAAI,EAAI,IAC9B,EAAK,EAAI,EAAI,GACb,CACL,MAAO,GACJ,GAAW,EAAI,EAAK,GAAM,IACxB,EAAK,EAAI,EAAU,GACnB,EAAK,EAAI,EAAU,GACnB,EAAO,EAAI,EAAK,EAAK,GACvB,EACJ,GAAI,EAAa,EAAI,GAAO,CAC3B,GAAI,GAAK,EAAI,EAAI,GACb,EAAK,EAAI,EAAI,GACjB,EAAI,EACJ,EAAI,EACJ,EAAI,EAAI,EAAK,QAEb,GAAI,EAEL,AAAI,EAAa,EAAI,IACpB,GAAI,EAAI,CAAC,IACV,GAAI,GAAI,EAAK,GAAI,GAAK,GACtB,MAAI,GAAa,IAChB,GAAI,EAAI,CAAC,IACH,EAAkB,GAE1B,OAAQ,CACP,MAAO,GAAW,KAAK,cAExB,UAAW,CACV,MAAO,MAAK,QAEb,OAAO,EAAO,CACb,EAAe,GACf,GAAM,GAAI,KAAK,GACT,EAAI,EAAM,GACV,EAAM,EAAI,EAAE,EAAI,EAAE,KAAO,EAAI,EAAE,EAAI,EAAE,GACrC,EAAM,EAAI,EAAE,EAAI,EAAE,KAAO,EAAI,EAAE,EAAI,EAAE,GAC3C,MAAO,IAAO,EAEf,IAAI,EAAO,CACV,SAAe,GACR,GAAI,GAAe,KAAK,GAAG,IAAI,EAAM,KAE7C,SAAS,EAAO,CACf,SAAe,GACR,GAAI,GAAe,KAAK,GAAG,SAAS,EAAM,KAElD,SAAS,EAAQ,CAChB,MAAO,IAAI,GAAe,KAAK,GAAG,SAAS,IAE5C,eAAe,EAAQ,CACtB,MAAO,IAAI,GAAe,KAAK,GAAG,eAAe,MAInD,EAAe,KAAO,GAAI,GAAe,EAAc,MACvD,EAAe,KAAO,GAAI,GAAe,EAAc,MACvD,GAAM,GAAmB,GAAI,SAE7B,OAAY,CACX,YAAY,EAAG,EAAG,CACjB,KAAK,EAAI,EACT,KAAK,EAAI,EAEV,eAAe,EAAY,CAC1B,KAAK,aAAe,EACpB,EAAiB,OAAO,YAElB,SAAQ,EAAK,EAAS,GAAM,CAClC,GAAM,CACL,IACA,KACG,EACJ,EAAM,EAAY,EAAK,IACvB,GAAM,GAAS,EAAI,QACnB,EAAO,IAAM,EAAI,IAAM,CAAC,IACxB,GAAM,GAAI,EAAgB,GAC1B,GAAI,GAAU,GAAK,EAClB,KAAM,IAAI,OAAM,wBACjB,GAAI,CAAC,GAAU,GAAK,GACnB,KAAM,IAAI,OAAM,6BACjB,GAAM,GAAK,EAAI,EAAI,GACb,EAAI,EAAI,EAAK,GACb,EAAI,EAAI,EAAI,EAAK,GACnB,CACH,UACA,MAAO,GACJ,EAAQ,EAAG,GACf,GAAI,CAAC,EACJ,KAAM,IAAI,OAAM,uCACjB,GAAM,GAAU,GAAI,KAAS,EAE7B,MAAI,AADmB,GAAI,IAAM,OAAU,IACrB,GACrB,GAAI,EAAI,CAAC,IAEH,GAAI,GAAM,EAAG,eAER,gBAAe,EAAY,CACvC,MAAQ,MAAM,GAAqB,IAAa,MAEjD,YAAa,CACZ,GAAM,GAAQ,EAAkB,KAAK,GACrC,SAAM,KAAO,KAAK,EAAI,EAAM,IAAO,EAC5B,EAER,OAAQ,CACP,MAAO,GAAW,KAAK,cAExB,UAAW,CACV,GAAM,CACL,KACG,KACE,EAAI,EAAK,GAAM,GAAK,EAAO,EAAM,IACvC,MAAO,GAAkB,GAE1B,eAAgB,CACf,MAAO,GAAc,WAAW,MAAM,gBAEvC,OAAO,EAAO,CACb,MAAO,MAAK,IAAM,EAAM,GAAK,KAAK,IAAM,EAAM,EAE/C,QAAS,CACR,MAAO,IAAI,GAAM,EAAI,CAAC,KAAK,GAAI,KAAK,GAErC,IAAI,EAAO,CACV,MAAO,GAAc,WAAW,MAAM,IAAI,EAAc,WAAW,IAAQ,WAE5E,SAAS,EAAO,CACf,MAAO,MAAK,IAAI,EAAM,UAEvB,SAAS,EAAQ,CAChB,MAAO,GAAc,WAAW,MAAM,SAAS,EAAQ,MAAM,aAI/D,EAAM,KAAO,GAAI,GAAM,EAAM,GAAI,EAAM,IACvC,EAAM,KAAO,GAAI,GAAM,EAAK,GAE5B,WAAgB,CACf,YAAY,EAAG,EAAG,CACjB,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,uBAEC,SAAQ,EAAK,CACnB,GAAM,GAAQ,EAAY,EAAK,IACzB,EAAI,EAAM,QAAQ,EAAM,MAAM,EAAG,IAAK,IACtC,EAAI,EAAgB,EAAM,MAAM,GAAI,KAC1C,MAAO,IAAI,GAAU,EAAG,GAEzB,gBAAiB,CAChB,GAAM,CACL,IACA,KACG,KACJ,GAAI,CAAE,aAAa,IAClB,KAAM,IAAI,OAAM,2BACjB,SAAgB,EAAG,EAAM,EAAG,IACrB,KAER,YAAa,CACZ,GAAM,GAAK,GAAI,YAAW,IAC1B,SAAG,IAAI,KAAK,EAAE,cACd,EAAG,IAAI,EAAkB,KAAK,GAAI,IAC3B,EAER,OAAQ,CACP,MAAO,GAAW,KAAK,gBAIzB,eAAwB,EAAQ,CAC/B,GAAI,CAAC,EAAO,MAAM,AAAC,GAAM,YAAa,aACrC,KAAM,IAAI,OAAM,4BACjB,GAAI,EAAO,SAAW,EACrB,MAAO,GAAO,GACf,GAAM,GAAS,EAAO,OAAO,CAAC,EAAG,IAAQ,EAAI,EAAI,OAAQ,GACnD,EAAS,GAAI,YAAW,GAC9B,OAAS,GAAI,EAAG,EAAM,EAAG,EAAI,EAAO,OAAQ,IAAK,CAChD,GAAM,GAAM,EAAO,GACnB,EAAO,IAAI,EAAK,GAChB,GAAO,EAAI,OAEZ,MAAO,GAGR,GAAM,IAAQ,MAAM,KAAK,CACxB,OAAQ,KACN,CAAC,EAAG,IAAM,EAAE,SAAS,IAAI,SAAS,EAAG,MAExC,WAAoB,EAAQ,CAC3B,GAAI,CAAE,aAAkB,aACvB,KAAM,IAAI,OAAM,uBACjB,GAAI,GAAM,GACV,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAClC,GAAO,GAAM,EAAO,IAErB,MAAO,GAGR,YAAoB,EAAK,CACxB,GAAI,MAAO,IAAQ,SAClB,KAAM,IAAI,WAAU,oCAAsC,MAAO,IAElE,GAAI,EAAI,OAAS,EAChB,KAAM,IAAI,OAAM,6CACjB,GAAM,GAAQ,GAAI,YAAW,EAAI,OAAS,GAC1C,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CACtC,GAAM,GAAI,EAAI,EACR,EAAU,EAAI,MAAM,EAAG,EAAI,GAC3B,EAAO,OAAO,SAAS,EAAS,IACtC,GAAI,OAAO,MAAM,IAAS,EAAO,EAChC,KAAM,IAAI,OAAM,yBACjB,EAAM,GAAK,EAEZ,MAAO,GAGR,YAA2B,EAAK,CAC/B,GAAM,GAAS,GACT,EAAM,EAAI,SAAS,IAAI,SAAS,EAAS,EAAG,KAClD,MAAO,IAAW,GAGnB,WAA2B,EAAK,CAC/B,MAAO,IAAkB,GAAK,UAG/B,WAAsB,EAAK,CAC1B,MAAQ,GAAI,GAAO,KAAS,EAG7B,WAAyB,EAAQ,CAChC,GAAI,CAAE,aAAkB,aACvB,KAAM,IAAI,OAAM,uBACjB,MAAO,QAAO,KAAO,EAAW,WAAW,KAAK,GAAQ,YAGzD,WAA4B,EAAO,CAClC,MAAO,GAAI,EAAgB,GAAU,GAAO,GAAQ,GAGrD,WAAa,EAAG,EAAI,EAAM,EAAG,CAC5B,GAAM,GAAM,EAAI,EAChB,MAAO,IAAO,EAAM,EAAM,EAAI,EAG/B,WAAgB,EAAQ,EAAS,EAAM,EAAG,CACzC,GAAI,IAAW,GAAO,GAAU,EAC/B,KAAM,IAAI,OAAM,6CAA6C,SAAc,KAE5E,GAAI,GAAI,EAAI,EAAQ,GAChB,EAAI,EACJ,EAAI,EACP,EAAI,EACL,KAAO,IAAM,GAAK,CACjB,GAAM,GAAI,EAAI,EACR,EAAI,EAAI,EACR,EAAI,EAAI,EAAI,EAClB,EAAI,EAAG,EAAI,EAAG,EAAI,EAAG,EAAI,EAG1B,GAAI,AADQ,IACA,EACX,KAAM,IAAI,OAAM,0BACjB,MAAO,GAAI,EAAG,GAGf,YAAqB,EAAM,EAAI,EAAM,EAAG,CACvC,GAAM,GAAM,GAAI,OAAM,EAAK,QACrB,EAAiB,EAAK,OAAO,CAAC,EAAK,EAAK,IACzC,IAAQ,EACJ,EACR,GAAI,GAAK,EACF,EAAI,EAAM,EAAK,IACpB,GACG,EAAW,EAAO,EAAgB,GACxC,SAAK,YAAY,CAAC,EAAK,EAAK,IACvB,IAAQ,EACJ,EACR,GAAI,GAAK,EAAI,EAAM,EAAI,GAAI,GACpB,EAAI,EAAM,EAAK,IACpB,GACI,EAGR,WAAc,EAAG,EAAO,CACvB,GAAM,CACL,KACG,EACA,EAAM,EACV,KAAO,KAAU,GAChB,GAAO,EACP,GAAO,EAER,MAAO,GAGR,YAAqB,EAAG,CACvB,GAAM,CACL,KACG,EACE,EAAM,OAAO,GACb,EAAO,OAAO,IACd,EAAO,OAAO,IACd,EAAO,OAAO,IACd,EAAO,OAAO,IAEd,EAAM,AADA,EAAI,EAAK,EACJ,EAAK,EAChB,EAAM,EAAK,EAAI,GAAO,EAAM,EAC5B,EAAM,EAAK,EAAI,GAAO,EAAK,EAC3B,EAAO,EAAK,EAAI,GAAO,EAAM,EAC7B,EAAO,EAAK,EAAK,GAAQ,EAAO,EAChC,EAAO,EAAK,EAAK,GAAQ,EAAO,EAChC,EAAO,EAAK,EAAK,GAAQ,EAAO,EAChC,EAAQ,EAAK,EAAK,GAAQ,EAAO,EACjC,EAAQ,EAAK,EAAM,GAAQ,EAAO,EAClC,EAAQ,EAAK,EAAM,GAAQ,EAAO,EAExC,MAAO,CACN,UAFkB,EAAK,EAAM,GAAO,EAAK,EAGzC,MAIF,WAAiB,EAAG,EAAG,CACtB,GAAM,GAAK,EAAI,EAAI,EAAI,GACjB,EAAK,EAAI,EAAK,EAAK,GACnB,EAAM,GAAY,EAAI,GAAI,UAC5B,EAAI,EAAI,EAAI,EAAK,GACf,EAAM,EAAI,EAAI,EAAI,GAClB,EAAQ,EACR,EAAQ,EAAI,EAAI,GAChB,EAAW,IAAQ,EACnB,EAAW,IAAQ,EAAI,CAAC,GACxB,EAAS,IAAQ,EAAI,CAAC,EAAI,GAChC,MAAI,IACH,GAAI,GACD,IAAY,IACf,GAAI,GACD,EAAa,IAChB,GAAI,EAAI,CAAC,IACH,CACN,QAAS,GAAY,EACrB,MAAO,GAIT,YAAoB,EAAQ,CAC3B,MAAO,GAAQ,EAAK,GAGrB,qBAA+B,EAAM,CACpC,GAAM,GAAO,KAAM,IAAM,OAAO,GAAY,GAAG,IACzC,EAAQ,EAAgB,GAC9B,MAAO,GAAI,EAAO,EAAM,GAGzB,YAAoB,EAAI,EAAI,CAC3B,GAAI,EAAG,SAAW,EAAG,OACpB,MAAO,GAER,OAAS,GAAI,EAAG,EAAI,EAAG,OAAQ,IAC9B,GAAI,EAAG,KAAO,EAAG,GAChB,MAAO,GAGT,MAAO,GAGR,WAAqB,EAAK,EAAgB,CACzC,GAAM,GAAQ,YAAe,YAAa,WAAW,KAAK,GAAO,GAAW,GAC5E,GAAI,MAAO,IAAmB,UAAY,EAAM,SAAW,EAC1D,KAAM,IAAI,OAAM,YAAY,WAC7B,MAAO,GAGR,WAAyB,EAAK,EAAK,EAAS,GAAM,CACjD,GAAI,CAAC,EACJ,KAAM,IAAI,WAAU,qBAGrB,GAFI,MAAO,IAAQ,UAAY,OAAO,cAAc,IACnD,GAAM,OAAO,IACV,MAAO,IAAQ,UAAY,EAAM,GACpC,GAAI,GACH,GAAI,EAAM,EACT,MAAO,WAEJ,GAAO,EACV,MAAO,GAGV,KAAM,IAAI,WAAU,2CAGrB,YAA0B,EAAO,CAChC,SAAM,IAAM,IACZ,EAAM,KAAO,IACb,EAAM,KAAO,GACN,EAGR,YAA2B,EAAG,CAC7B,MAAO,GAAgB,GAAiB,EAAY,EAAG,MAGxD,iBAAoC,EAAK,CAMxC,GAJA,EACC,MAAO,IAAQ,UAAY,MAAO,IAAQ,SAC1C,GAAkB,EAAgB,EAAK,KACvC,EAAY,GACT,EAAI,SAAW,GAClB,KAAM,IAAI,OAAM,6BAA+B,EAAI,QACpD,GAAM,GAAS,KAAM,IAAM,OAAO,GAC5B,EAAO,GAAiB,EAAO,MAAM,EAAG,KACxC,EAAS,EAAO,MAAM,GAAI,IAC1B,EAAS,EAAI,EAAgB,GAAO,EAAM,GAC1C,EAAQ,EAAM,KAAK,SAAS,GAC5B,EAAa,EAAM,aACzB,MAAO,CACN,OACA,SACA,SACA,QACA,cAGF,kBAA4B,EAAY,CACvC,MAAQ,MAAM,GAAqB,IAAa,WAGjD,kBAAoB,EAAS,EAAY,CACxC,EAAU,EAAY,GACtB,GAAM,CACL,SACA,SACA,cACG,KAAM,GAAqB,GACzB,EAAI,KAAM,IAAa,EAAQ,GAC/B,EAAI,EAAM,KAAK,SAAS,GACxB,EAAI,KAAM,IAAa,EAAE,aAAc,EAAY,GACnD,EAAI,EAAI,EAAI,EAAI,EAAQ,EAAM,GACpC,MAAO,IAAI,GAAU,EAAG,GAAG,aAG5B,kBAAsB,EAAK,EAAS,EAAW,CAC9C,EAAU,EAAY,GAChB,YAAqB,IAC1B,GAAY,EAAM,QAAQ,EAAW,KACtC,GAAM,CACL,IACA,KACG,YAAe,GAAY,EAAI,iBAAmB,EAAU,QAAQ,GAClE,EAAK,EAAc,KAAK,eAAe,GACvC,EAAI,KAAM,IAAa,EAAE,aAAc,EAAU,aAAc,GAC/D,EAAK,EAAc,WAAW,GAAW,eAAe,GAE9D,MAAO,AADK,GAAc,WAAW,GAAG,IAAI,GACjC,SAAS,GAAI,eAAe,EAAM,GAAG,OAAO,EAAc,MAGtE,kBAA+B,EAAY,EAAW,CACrD,GAAM,CACL,QACG,KAAM,GAAqB,GACzB,EAAI,EAAM,QAAQ,GAAW,WACnC,MAAO,IAAW,WAAW,EAAM,GAGpC,EAAM,KAAK,eAAe,GAE1B,WAAe,EAAM,EAAK,EAAK,CAC9B,GAAM,GAAQ,EAAI,EAAQ,GAAM,IAChC,SAAM,EAAI,EAAM,GAChB,EAAM,EAAI,EAAM,GACT,CAAC,EAAK,GAGd,YAA0B,EAAQ,EAAQ,CACzC,GAAM,CACL,KACG,EACE,EAAI,EAAgB,EAAQ,GAC5B,EAAI,EAAgB,EAAQ,GAC5B,EAAM,OAAO,QACb,EAAM,EACR,EAAM,EACN,EAAM,EACN,EAAM,EACN,EAAM,EACN,EAAO,EACP,EACJ,OAAS,GAAI,OAAO,IAAM,GAAI,GAAK,EAAK,IAAK,CAC5C,GAAM,GAAO,GAAK,EAAK,EACvB,GAAQ,EACR,EAAK,EAAM,EAAM,EAAK,GACtB,EAAM,EAAG,GACT,EAAM,EAAG,GACT,EAAK,EAAM,EAAM,EAAK,GACtB,EAAM,EAAG,GACT,EAAM,EAAG,GACT,EAAO,EACP,GAAM,GAAI,EAAM,EACV,EAAK,EAAI,EAAI,GACb,EAAI,EAAM,EACV,EAAK,EAAI,EAAI,GACb,GAAI,EAAK,EACT,GAAI,EAAM,EACV,GAAI,EAAM,EACV,GAAK,EAAI,GAAI,GACb,GAAK,EAAI,GAAI,GACnB,EAAM,EAAK,IAAK,KAAO,GACvB,EAAM,EAAI,EAAO,IAAK,KAAO,GAC7B,EAAM,EAAI,EAAK,GACf,EAAM,EAAI,GAAK,GAAK,EAAI,EAAM,MAE/B,EAAK,EAAM,EAAM,EAAK,GACtB,EAAM,EAAG,GACT,EAAM,EAAG,GACT,EAAK,EAAM,EAAM,EAAK,GACtB,EAAM,EAAG,GACT,EAAM,EAAG,GACT,GAAM,CACL,YACA,MACG,GAAY,GACV,EAAM,EAAI,EAAK,EAAW,OAAO,IAAM,GAC7C,MAAO,GAAI,EAAM,GAGlB,YAA2B,EAAG,CAC7B,MAAO,GAAkB,EAAI,EAAG,EAAM,IAGvC,YAA2B,EAAM,CAChC,GAAM,GAAI,EAAY,EAAM,IAC5B,SAAE,KAAO,IACF,EAAgB,GAGxB,GAAM,IAAa,CAClB,aAAc,mEACd,WAAW,EAAY,EAAW,CACjC,GAAM,GAAI,GAAkB,GACtB,EAAI,GAAkB,GACtB,EAAK,GAAiB,EAAG,GAC/B,GAAI,IAAO,EACV,KAAM,IAAI,OAAM,0CACjB,MAAO,IAAkB,IAE1B,eAAe,EAAY,CAC1B,MAAO,IAAW,WAAW,EAAY,GAAW,gBAIhD,EAAS,CACd,KAAM,GACN,IAAK,MAAO,OAAS,UAAY,UAAY,MAAO,KAAK,OAAS,QAG7D,GAAQ,CACb,iBAAkB,CACjB,mEACA,mEACA,mEACA,mEACA,mEACA,mEACA,mEACA,oEAED,aACA,uBACA,MACA,SACA,oBAAqB,AAAC,GAAS,CAE9B,GADA,EAAO,EAAY,GACf,EAAK,OAAS,IAAM,EAAK,OAAS,KACrC,KAAM,IAAI,OAAM,yDACjB,GAAM,GAAM,EAAI,EAAgB,GAAO,EAAM,GAC7C,GAAI,IAAQ,GAAO,IAAQ,EAC1B,KAAM,IAAI,OAAM,uBACjB,MAAO,IAER,YAAa,CAAC,EAAc,KAAO,CAClC,GAAI,EAAO,IACV,MAAO,GAAO,IAAI,gBAAgB,GAAI,YAAW,IAC3C,GAAI,EAAO,KAAM,CACvB,GAAM,CACL,eACG,EAAO,KACX,MAAO,IAAI,YAAW,EAAY,GAAa,YAE/C,MAAM,IAAI,OAAM,sDAGlB,iBAAkB,IACV,GAAM,YAAY,IAE1B,OAAQ,KAAO,IAAY,CAC1B,GAAI,EAAO,IAAK,CACf,GAAM,GAAS,KAAM,GAAO,IAAI,OAAO,OAAO,UAAW,EAAQ,QACjE,MAAO,IAAI,YAAW,OAChB,IAAI,EAAO,KACjB,MAAO,YAAW,KAAK,EAAO,KAAK,WAAW,UAAU,OAAO,GAAS,UAExE,KAAM,IAAI,OAAM,kDAGlB,WAAW,EAAa,EAAG,EAAQ,EAAM,KAAM,CAC9C,GAAM,GAAS,EAAM,OAAO,EAAM,MAAQ,EAAQ,GAAI,GAAM,EAAM,EAAG,EAAM,GAC3E,SAAO,eAAe,GACtB,EAAO,SAAS,GACT,ICj8BT,GAAI,GAGJ,SAAS,iBAAiB,mBAAoB,IAAM,CACnD,EAAc,SAAS,eAAe,WAGtC,SAAS,eAAe,qBAAqB,iBAAiB,QAAS,IACvE,SAAS,eAAe,iBAAiB,iBAAiB,QAAS,IACnE,SAAS,eAAe,WAAW,iBAAiB,QAAS,IAC7D,SAAS,eAAe,aAAa,iBAAiB,QAAS,MAKhE,mBAAoC,CACnC,GAAI,GAAO,OAAO,gBAAgB,GAAI,YAAW,KAC7C,EAAM,KAAM,GAAiB,GACjC,AAAI,EAAY,QAAU,MACzB,EAAO,EAEP,EAAO,KAAM,IAAkB,GAGhC,KAAM,IAAW,GACjB,GAAqB,KAAM,IAAQ,UAAW,IAK/C,mBAAgC,CAC/B,GAAI,GAAO,SAAS,eAAe,QAAQ,MAC3C,GAAI,EAAQ,GAAO,CAClB,QAAQ,MAAM,0DACd,GAAI,GAAK,KAAM,MAEf,MADA,SAAQ,MAAM,GACV,IAAO,KACV,OAKF,KAAM,IAAW,GACb,EAAY,QAAU,OACzB,GAAO,EAAS,IAEjB,GAAqB,KAAM,IAAQ,UAAW,IAI/C,mBAA4B,CAC3B,GAAI,GAAkB,KAAM,MACxB,EAAW,KAAM,MACrB,GAAI,IAAoB,MAAQ,IAAa,KAE5C,OAGD,GAAI,GAAQ,KAAM,AAAG,IAAK,EAAU,GACpC,GAAI,CAAC,GAAmB,GACvB,OAED,GAAI,GAAM,KAAM,GAAiB,GAGjC,GAAI,EAAQ,IAAQ,EAAI,OAAS,IAAM,EAAG,CACzC,QAAQ,MAAM,wBACd,OAGD,SAAS,eAAe,UAAU,YAAc,EAChD,SAAS,eAAe,UAAU,YAAc,KAAM,GAAW,GACjE,GAAe,SAAS,eAAe,aAAc,GAKtD,mBAA8B,CAC7B,GAAI,GAAQ,GACR,EAAM,oBACN,EAAM,SAAS,eAAe,aAAa,MAC3C,EAAiB,KAAM,MAC3B,GAAI,CAAC,EAAQ,IAAQ,GAAmB,GACvC,GAAI,CAEH,EAAQ,KAAM,AAAG,IAAO,EAAgB,KAAM,MAAmB,KAAM,aAC/D,EAAP,CACD,QAAQ,MAAM,GACd,EAAQ,UACP,CACD,AAAI,GACH,GAAM,mBAKT,SAAS,eAAe,kBAAkB,YAAc,EASzD,kBAAoC,EAAK,CACxC,GAAI,GAAU,KAAM,GAAW,GAC3B,EAAS,KAAM,GAAiB,KAAM,AAAG,IAAa,GAAI,YAAW,KAAM,GAAiB,MAC5F,EAAS,KAAM,GAAW,GAE9B,SAAS,eAAe,aAAa,YAAc,EACnD,SAAS,eAAe,aAAa,YAAc,EAEnD,SAAS,eAAe,aAAa,YAAc,EACnD,SAAS,eAAe,aAAa,YAAc,EAGnD,GAAI,GACA,EACJ,AAAI,EAAY,QAAU,MACzB,GAAO,EACP,EAAM,GAEN,GAAO,EACP,EAAM,GAGP,SAAS,eAAe,aAAa,MAAQ,EAC7C,SAAS,eAAe,cAAc,MAAQ,EAK/C,mBAAoC,CACnC,GAAI,GAAa,SAAS,eAAe,cAAc,MACvD,MAAI,GAAQ,GACX,SAAQ,MAAM,yBACP,MAEJ,GAAY,QAAU,OACzB,GAAa,EAAS,IAEhB,GAAI,YAAW,KAAM,GAAiB,KAM9C,mBAAmC,CAClC,GAAI,GAAY,SAAS,eAAe,aAAa,MACrD,GAAI,EAAQ,GAAY,CACvB,QAAQ,MAAM,gEACd,GAAI,GAAa,SAAS,eAAe,cAAc,MACvD,GAAI,EAAQ,GAAa,CACxB,QAAQ,MAAM,8DACd,GAAI,GAAO,SAAS,eAAe,QAAQ,MAC3C,GAAI,EAAQ,GACX,eAAQ,MAAM,kBACP,KAEP,AAAI,EAAY,QAAU,OACzB,GAAO,EAAS,IAEjB,EAAY,KAAM,GAAiB,KAAM,IAAmC,KAAM,IAAQ,UAAW,SAGtG,GAAY,KAAM,GAAiB,KAAM,IAAmC,IAI9E,MAAI,GAAY,QAAU,OACzB,GAAY,EAAS,IAEf,GAAI,YAAW,KAAM,GAAiB,IAI9C,kBAAkD,EAAQ,CACzD,GAAI,GACJ,MAAI,GAAY,QAAU,MACzB,EAAQ,KAAM,GAAiB,GAE/B,EAAQ,KAAM,GAAiB,EAAS,IAElC,KAAM,AAAG,IAAa,GAAI,YAAW,IAK7C,mBAAmC,CAClC,GAAI,GAAY,SAAS,eAAe,aAAa,MACrD,MAAI,GAAQ,GACX,SAAQ,MAAM,uBACP,MAEJ,GAAY,QAAU,OACzB,GAAY,EAAS,IAEf,GAAI,YAAW,KAAM,GAAiB,KAK9C,mBAAiC,CAChC,GAAI,GAAU,SAAS,eAAe,YAAY,MAC9C,EAAe,GAAI,YAGvB,GAAI,CAAC,EAAQ,GACZ,OAAQ,SAAS,eAAe,WAAW,WACrC,MACJ,EAAe,GAAI,YAAW,KAAM,GAAiB,EAAS,KAC9D,UACI,MACJ,EAAe,GAAI,YAAW,KAAM,GAAiB,IACrD,UACI,OAEJ,EAAe,AADL,GAAI,aAAY,SACP,OAAO,GAC1B,cAEA,eAAQ,MAAM,gCACP,KAGV,MAAO,GAMR,kBAA0B,EAAM,CAC/B,GAAI,GACA,EACJ,AAAI,EAAY,QAAU,MACzB,GAAU,EACV,EAAO,EAAS,GAChB,EAAU,GAEV,GAAU,EACV,EAAU,KAAM,GAAW,IAI5B,SAAS,eAAe,WAAW,YAAc,EACjD,SAAS,eAAe,WAAW,YAAc,EACjD,GAAe,SAAS,eAAe,QAAS,GAOjD,kBAA8B,EAAM,EAAK,CAExC,GAAI,EAAY,QAAU,MAAO,CAChC,EAAK,MAAQ,EACb,OAED,EAAK,MAAQ,KAAM,GAAW,GAI/B,YAA4B,EAAO,CAClC,MAAI,GAAQ,EAAM,aAAe,EAAM,aAAe,GACrD,SAAQ,MAAM,4BACP,IAED,GAcR,WAAkB,EAAK,CAEtB,GAAI,GAAO,GAAgB,GACrB,EAAM,KAAK,GACb,EAAS,GACb,OAAS,GAAI,EAAG,EAAI,EAAI,OAAQ,IAAK,CACpC,GAAM,GAAM,EAAI,WAAW,GAAG,SAAS,IAAI,cAC3C,GAAW,EAAI,SAAW,EAAI,EAAM,IAAM,EAE3C,MAAO,GASR,YAAyB,EAAM,CAC9B,MAAO,GAAK,QAAQ,KAAM,KAAK,QAAQ,KAAM,KAS9C,iBAA0B,EAAK,CAC9B,GAAI,GAAK,KAAM,GAAiB,GAChC,MAAO,MAAM,IAAkB,GAShC,YAAyB,EAAM,CAC9B,MAAO,GAAK,QAAQ,MAAO,KAAK,QAAQ,MAAO,KAQhD,YAAiB,EAAQ,CACxB,MAAO,GAAO,QAAQ,KAAM,IAS7B,YAA2B,EAAQ,CAClC,GAAI,GAAS,OAAO,aAAa,MAAM,KAAM,GAAI,YAAW,IAC5D,MAAO,IAAQ,GAAgB,KAAK,KAIrC,kBAAuB,EAAS,EAAK,CAEpC,GAAI,EAAQ,GACX,KAAM,IAAI,OAAM,+BAEjB,MAAO,GAAiB,KAAM,QAAO,OAAO,OAAO,EAAS,KAAM,GAAiB,KAQpF,iBAAgC,EAAK,CACpC,GAAI,MAAO,IAAQ,SAElB,KAAM,IAAI,WAAU,gEAGrB,GAAK,EAAI,OAAS,IAAO,EACxB,KAAM,IAAI,YAAW,qFAKtB,OAFI,GAAO,GAAI,YAAW,EAAI,OAAS,GAE9B,EAAI,EAAG,EAAI,EAAI,OAAQ,GAAK,EACpC,EAAK,EAAI,GAAK,SAAS,EAAI,UAAU,EAAG,EAAI,GAAI,IAGjD,MAAO,GAAK,OAUb,iBAAgC,EAAQ,CACvC,MAAO,CAAC,GAAG,GAAI,YAAW,IAAS,IAAI,GAAK,EAAE,SAAS,IAAI,SAAS,EAAG,MAAM,KAAK,IAAI,cAyBvF,WAAiB,EAAO,CACvB,MAAI,OAAO,IAAU,WACb,GAGJ,IAAU,OAAO,GAChB,OAAO,KAAK,GAAO,SAAW,EAM9B,IAAO,GAiBb,YAAgB,EAAM,CACrB,MACC,MAAS,IACT,IAAS,SACT,IAAS,QACT,IAAS,aACT,IAAS,IACT,IAAS,GACT,IAAS,KACT,IAAS,MACT,IAAS,QACT,IAAS,OACT,OAAO,MAAM,IACb,IAAS,OAAO",
  "names": []
}
